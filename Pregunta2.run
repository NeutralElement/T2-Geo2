reset;
model Pregunta2.mod;
option solver gurobi;
data Pregunta2.dat;

var s integer := 0;				#	Variable dummy para llevar registro de los caminos encontrados.
var M integer:=0;				#	Variable dummy para actualizar el valor de m en el siguiente for.

for {1..10}{
	let M := M+1;									#	Este for recorre todos los valores solicitados
	let m := M;										#	para m, i.e., desde 1 a 10. Con ellos, resuelve
	solve;											#	el problema del m-TSP e imprime las soluciones
	for{w in K}{									#	sin un orden en particular, pero sí en un formato
	    printf ("###   Solucion Ruta k   ###\n");	#	especial, es decir, arroja cosas como:
	    let s := 0;									#	
	    printf"M[%d] = [", w-1;						#			"M[3] = [(17,8), (8,12), (12,17)]"
	    for {i in N, j in N: j!=i} {				#
	    	if X[i,j,w] = 1 then{					#	Es decir, es la solucion que pasa de 17 a 8, 
	    		if s = 0 then						#	de 8 a 12, de 12 a 17 (17 es Paris).
	    			printf "(%d, %d)", i,j;			#	Este formato es usado en el postprocesamiento de
	    		if s > 0 then 						#	las rutas encontradas en cada m-TSP, para el 
	    			printf ", (%d, %d)", i,j;		#	análisis y confección del informe.
	    		let s := s+1;						#	
	    		if s mod 5 = 0 then					#	
	    		#Esta linea simplemente identa si	#
				#es que es muy larga la ruta.		#
					printf "\n";					#
	    		}									#
		}											#
		printf("]");								#
		printf("\n");								#
	}												#
	display FO;										#	Se muestran los tiempos y distancias totales.
	display D;										#
}